


function tokenize(object, target) {
    var pid_re = new RegExp(/(?:pid=\d+)|(?:pid:\d+)|(?:pid\s\d+)/);
    var uid_re = new RegExp(/(?:uid=\d+)/);
    var gid_re = new RegExp(/(?:gids=\d+\s?\d+)/);
    var numeric_re = new RegExp(/^\d+$/);
    var re = new RegExp(/\{.*\}|\(.*\)/ig); // unified expression within brackets
    var tokens = [];
    var unified_msg = target;
    var matches = re.exec(target);
    var detected_ids = [];
    if (object === "am_proc_start" || object === "am_proc_died") {
        detected_ids.push(target.substr(1, target.indexOf(",") - 1));
    }
    if (matches !== null) {
        matches.forEach(function(matched_token) {
            var unified_token = matched_token.replace(/(,\s)|\s|,/, ' '); // replace the inner punctuations with space
            unified_msg = unified_msg.replace(matched_token, unified_token); 
        });
    }
    var escaped_msg = unified_msg.replace(/{|}|\(|\)|\[|\]|;/g, ''); // escape all brackets and `;` in message
    var tokenize_buf = escaped_msg.replace(/(:\s)/g, ' '); // replace `: ` with single space
    matches = pid_re.exec(tokenize_buf); // extract pids
    if (matches !== null) {
        matches.forEach(function(matched_id) {
            var pid = matched_id.split(/=|\s|:/)[1];  
            if (detected_ids.indexOf(pid) === -1)
                detected_ids.push(pid);
        });
    }
    matches = uid_re.exec(tokenize_buf); // extract uids
    if (matches !== null) {
        matches.forEach(function(matched_id) {
            var uid = matched_id.split(/=|\s|:/)[1];  
            if (detected_ids.indexOf(uid) === -1)
                detected_ids.push(uid);
        });
    }
    matches = gid_re.exec(tokenize_buf); // extract gids
    if (matches !== null) {
        matches.forEach(function(matched_id) {
            var gids = matched_id.split(/=/)[1];
            gids.split(' ').forEach(function(gid) {
                detected_ids.push(gid); 
            });
        });
    }
    tokenize_buf = tokenize_buf.replace(/\.$/g, ''); // remove the `.` at the end of the message
    var tokens_buf = tokenize_buf.split(/\s|,|=/); // split string by space or `,` or `=`
    tokens_buf.forEach(function(token_buf) {
        if (token_buf !== "" && !numeric_re.test(token_buf)) tokens.push(token_buf); // remove empty token generated by replacement above
    });
    return [tokens, detected_ids];
}


